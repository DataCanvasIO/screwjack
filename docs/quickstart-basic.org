#+TITLE: Getting Started with Screwjack(Basic)
#+OPTIONS: ^:nil

Before you trying following, you should ensure screwjack is installed. Please 
refer :doc:`Introduction<intro>` for detail installation steps.

* Step 1: Initialize a module

First, assume you want create a *basic* module, which is a template with basic
functinality. If you interested in writing a 'Hive' module, please refer to
:doc:`Getting Started with Screwjack(Hive)<quickstart-hive>`.

So, you can create a basic module with =screwjack=:

#+BEGIN_SRC
  screwjack init basic --name="SVM" --description="A simple SVM"
#+END_SRC

Then, it will prompt to setup other options, like the following. In this tutorial,
we will use scikit-learn, which are packed in base image =zetdata/sci-python:2.7=.

#+BEGIN_SRC
  Module Version [0.1]: 
  Module Entry Command [python main.py]: 
  Base Image [zetdata/ubuntu:trusty]: zetdata/sci-python:2.7
  Sucessfully created 'svm'
#+END_SRC

Or, you can use single command to do this:

#+BEGIN_SRC bash
  screwjack init basic --name=SVM --description="A simple SVM" --version="0.1" --cmd="/usr/bin/python main.py" --base-image="zetdata/sci-python:2.7"
#+END_SRC

Now, you will get a directory with initial verison of basic module:

#+BEGIN_SRC
  svm
  |-- Dockerfile
  |-- main.py
  |-- requirements.txt
  `-- spec.json

  0 directories, 4 files
#+END_SRC

Then you should change to the directory of the new module, the following steps will
assume we are working at that directory.

#+BEGIN_SRC sh
  cd svm
#+END_SRC

* Step 2: Add Input/Output/Param

Image we want create a module with two *Input*s, one *Output*, and one parameter. Just like
the following diagram shows:

#+begin_src ditaa :file ditaa-simpleboxes-unsep.png :cmdline -E
          /-----------------\
          | SVM             |
  X(csv)  +-----------------+
--------->|                 |  MODEL(model.svm)
          | Params:         |------------------->
          +=================|
  Y(csv)  | o C(float)      |
--------->|                 |
          \-----------------/
#+end_src

[[./module.png]]

Now we can add a parameter using the following command:

#+BEGIN_SRC bash
  screwjack param_add C float
#+END_SRC

And, we add two Inputs by the following commands. The first argument *X* means the name
of the input/output, and the second argument *csv* means the type for this input/output.
A type can be any string, like "csv", "hive.hdfs.table_x". For more information about
types, please follow :doc:`Input/Output Types <io-types>`.

#+BEGIN_SRC bash
  screwjack input_add X csv
  screwjack input_add Y csv
#+END_SRC

Finally, a Output:
#+BEGIN_SRC bash
  screwjack output_add MODEL model.svm
#+END_SRC

* Step 3: Fill your code implementation

Now, you can write your awesome implementation now:

#+BEGIN_SRC bash
  vim main.py
#+END_SRC

In this tutorial, we would like implement our =main.py= like this:

#+BEGIN_SRC python
from datacanvas import DatacanvasRuntime
from sklearn.svm import LinearSVC
import numpy as np
import pickle

def main():
    rt = DatacanvasRuntime()
    settings = rt.settings

    # TODO: Add your code here
    X = np.genfromtxt(settings.Input.X, delimiter=',', skip_header=1)
    Y = np.genfromtxt(settings.Input.Y, delimiter=',', skip_header=1)
    svc = LinearSVC(C=float(settings.Param.C))
    svc.fit(X,Y)
    with open(settings.Output.MODEL, "w") as f:
        pickle.dump(svc, f)
    print("Done")

if __name__ == "__main__":
    main()
#+END_SRC

If you want add additional files for this module, don't forget add files
in =Dockerfile=.

#+BEGIN_SRC bash
  vim Dockerfile
#+END_SRC

For example, if you have additional file, you should append the following line
into =Dockerfile=:

#+BEGIN_SRC
  ADD your_additional_file /home/run/
#+END_SRC

In the case if you want add additional folder, you should append a line like this:

#+BEGIN_SRC
  ADD your_additional_folder /home/run/your_additional_folder
#+END_SRC

For more information about =Dockerfile=, please reference [[http://docs.docker.io/reference/builder/][Dockerfile]].

* Step 4.1: Test in *local*

After write own implementation into this module, we might want test it.
The =screwjack run= subcommands are design for this.

#+BEGIN_SRC bash
  screwjack run local --help
#+END_SRC

#+BEGIN_SRC bash
  Usage: screwjack run local [OPTIONS]
  Options:
    --param-C TEXT  Param(string)
    --X TEXT        Input
    --Y TEXT        Input
    --MODEL TEXT    Output
    --help          Show this message and exit.
#+END_SRC

Now, we can test our module in local environment, which is very close to your developing
environment.

#+BEGIN_SRC bash
  screwjack run local --param-C=0.1 --X=a.csv --Y=b.csv --MODEL=tmp.model
#+END_SRC

* Step 4.2: Test in *docker*

Then, we can try to execute module by docker:

#+BEGIN_SRC bash
  screwjack run docker --param-C=0.1 --X=a.csv --Y=b.csv --MODEL=tmp.model
#+END_SRC

* Step 5: Submit module

You should provide the URL of =spec_server= to submit:

#+BEGIN_SRC bash
  screwjack submit
#+END_SRC
